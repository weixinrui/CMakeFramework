#[=======================================================[.rst:
    Description:
    [optional]: optional statement
    [required]: compulsory statement

    SET list:
    LIBRARY_LINKING: [optional], value:["SHARED","STATIC"]
    LIBRARY_NAME: [required], value:string

    LIBRARY_PCH_ENABLE: [optional], value:["ON","OFF"]
    LIBRARY_PCH_HEADER_FILE: [optional], value: TODO
    LIBRARY_PCH_SOURCE_FILE: [optional], value: TODO

    LIBRARY_INCLUDE:
    LIBRARY_INC:
    LIBRARY_SRC:

    LIBRARY_MOC_INCLUDE_DIRECTORIES:
    LIBRARY_MOC_SRCS:
    LIBRARY_UI_FORMS:
    LIBRARY_RESOURCES:

    LIBRARY_CUSTOM_GROUP:

    LIBRARY_FOLDER:

    LIBRARY_GENERAL_DEFINITIONS:
    LIBRARY_DEFINITIONS_<CONFIG>:

    LIBRARY_GENERAL_COMPILE_OPTIONS:
    LIBRARY_COMPILE_OPTIONS_<CONFIG>:

    LIBRARY_GENERAL_LINK_FLAGS:
    LIBRARY_GENERAL_LINK_FLAGS_<CONFIG>:

    LIBRARY_INCLUDE_DIRECTORIES_PUBLIC:
    LIBRARY_INCLUDE_DIRECTORIES_INTERFACE:
    LIBRARY_INCLUDE_DIRECTORIES_PRIVATE:

    LIBRARY_LINK_LIBRARIES_PUBLIC:
    LIBRARY_LINK_LIBRARIES_PUBLIC_DEBUG:
    LIBRARY_LINK_LIBRARIES_PUBLIC_OPTIMIZED:
    
    LIBRARY_LINK_LIBRARIES_INTERFACE:
    LIBRARY_LINK_LIBRARIES_INTERFACE_DEBUG:
    LIBRARY_LINK_LIBRARIES_INTERFACE_OPTIMIZED:
    
    LIBRARY_LINK_LIBRARIES_PRIVATE:
    LIBRARY_LINK_LIBRARIES_PRIVATE_DEBUG:
    LIBRARY_LINK_LIBRARIES_PRIVATE_OPTIMIZED:

    LIBRARY_USE_MODULES_PUBLIC:
    LIBRARY_USE_MODULES_INTERFACE:
    LIBRARY_USE_MODULES_PRIVATE:

    LIBRARY_DEPENDENCIES:

    LIBRARY_INSTALL:
    LIBRARY_INSTALL_HEADERS:
    
#]=======================================================]

CHECK_LIBRARY_LINKING()

IF(RESULT_LIBRARY_LINK_DYNAMIC)
    ADD_DEFINITIONS(-DXXX)
ELSE()
    MESSAGE(FATAL_ERROR "XXX does")
ENDIF()

SET(LIBRARY_NAME XXX)

SET(LIBRARY_INCLUDE )
SET(LIBRARY_INC )

IF(WINDOWS)
    SET(PLATFORM_SRC)
ENDIF()

SET(LIBRARY_SRC
    ${PLATFORM_SRC}
    ${SOURCE_COMMON_DIR}/target_winver.cpp
)

SET(LIBRARY_FOLDER "XXX")

#SET(LIBRARY_GENERAL_DEFINITIONS "")
#SET (LIBRARY_DEFINITIONS_<CONFIG> "")
#[[
IF(WINDOWS)
    SET (_PLATFORM_COMPILE_OPTIONS )
    SET (_PLATFORM_COMPILE_OPTIONS_DEBUG )
    SET (_PLATFORM_COMPILE_OPTIONS_RELEASE )
    SET (_PLATFORM_LINK_FLAGS )
    SET (_PLATFORM_LINK_FLAGS_DEBUG )
    SET (_PLATFORM_LINK_FLAGS_RELEASE )
ELSEIF(ZS_MAC)
    SET (_PLATFORM_COMPILE_OPTIONS )
    SET (_PLATFORM_COMPILE_OPTIONS_DEBUG )
    SET (_PLATFORM_COMPILE_OPTIONS_RELEASE )
    SET (_PLATFORM_LINK_FLAGS )
    SET (_PLATFORM_LINK_FLAGS_DEBUG )
    SET (_PLATFORM_LINK_FLAGS_RELEASE )
ELSEIF(ZS-UNIX)
    SET (_PLATFORM_COMPILE_OPTIONS )
    SET (_PLATFORM_COMPILE_OPTIONS_DEBUG )
    SET (_PLATFORM_COMPILE_OPTIONS_RELEASE )
    SET (_PLATFORM_LINK_FLAGS )
    SET (_PLATFORM_LINK_FLAGS_DEBUG )
    SET (_PLATFORM_LINK_FLAGS_RELEASE )
ELSE()
    MESSAGE(FATAL_ERROR "zsoft not support platform") 
ENDIF()
#]]

# COMPILE_OPTIONS
SET(LIBRARY_GENERAL_COMPILE_OPTIONS
    ${_PLATFORM_COMPILE_OPTIONS}
)
SET(LIBRARY_COMPILE_OPTIONS_DEBUG
    ${_PLATFORM_COMPILE_OPTIONS_DEBUG}
)
SET(LIBRARY_COMPILE_OPTIONS_RELEASE
    ${_PLATFORM_COMPILE_OPTIONS_RELEASE}
)
# LINK_FLAGS
SET(LIBRARY_GENERAL_LINK_FLAGS 
    ${_PLATFORM_LINK_FLAGS}
)
SET(LIBRARY_LINK_FLAGS_DEBUG
    ${_PLATFORM_LINK_FLAGS_DEBUG}
)
SET(ZS_LIBRARY_LINK_FLAGS_RELEASE )
SET(ZS_LIBRARY_INCLUDE_DIRECTORIES_PRIVATE )
SET(ZS_LIBRARY_USE_MODULES_PRIVATE )
SET(ZS_LIBRARY_DEPENDENCIES )
SET(ZS_LIBRARY_INSTALL ON)
SET (ZS_LIBRARY_INSTALL_HEADERS )
ZS_SETUP_LIBRARY ()